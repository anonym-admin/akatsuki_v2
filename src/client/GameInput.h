#pragma once

#define DIRECTINPUT_VERSION 0x0800
#include <dinput.h>

enum KEY_STATE
{
	KEY_FREE,
	KEY_UP,
	KEY_PUSH,
	KEY_HOLD,
};

enum KEY_INPUT
{
	KEY_INPUT_ESCAPE,
	KEY_INPUT_1,
	KEY_INPUT_2,
	KEY_INPUT_3,
	KEY_INPUT_4,
	KEY_INPUT_5,
	KEY_INPUT_6,
	KEY_INPUT_7,
	KEY_INPUT_8,
	KEY_INPUT_9,
	KEY_INPUT_0,
	KEY_INPUT_MINUS,
	KEY_INPUT_EQUALS,
	KEY_INPUT_BACK,
	KEY_INPUT_TAB,
	KEY_INPUT_Q,
	KEY_INPUT_W,
	KEY_INPUT_E,
	KEY_INPUT_R,
	KEY_INPUT_T,
	KEY_INPUT_Y,
	KEY_INPUT_U,
	KEY_INPUT_I,
	KEY_INPUT_O,
	KEY_INPUT_P,
	KEY_INPUT_LBRACKET,
	KEY_INPUT_RBRACKET,
	KEY_INPUT_RETURN,
	KEY_INPUT_LCONTROL,
	KEY_INPUT_A,
	KEY_INPUT_S,
	KEY_INPUT_D,
	KEY_INPUT_F,
	KEY_INPUT_G,
	KEY_INPUT_H,
	KEY_INPUT_J,
	KEY_INPUT_K,
	KEY_INPUT_L,
	KEY_INPUT_SEMICOLON,
	KEY_INPUT_APOSTROPHE,
	KEY_INPUT_GRAVE,
	KEY_INPUT_LSHIFT,
	KEY_INPUT_BACKSLASH,
	KEY_INPUT_Z,
	KEY_INPUT_X,
	KEY_INPUT_C,
	KEY_INPUT_V,
	KEY_INPUT_B,
	KEY_INPUT_N,
	KEY_INPUT_M,
	KEY_INPUT_COMMA,
	KEY_INPUT_PERIOD,
	KEY_INPUT_SLASH,
	KEY_INPUT_RSHIFT,
	KEY_INPUT_MULTIPLY,
	KEY_INPUT_LMENU,
	KEY_INPUT_SPACE,
	KEY_INPUT_CAPITAL,
	KEY_INPUT_F1,
	KEY_INPUT_F2,
	KEY_INPUT_F3,
	KEY_INPUT_F4,
	KEY_INPUT_F5,
	KEY_INPUT_F6,
	KEY_INPUT_F7,
	KEY_INPUT_F8,
	KEY_INPUT_F9,
	KEY_INPUT_F10,
	KEY_INPUT_NUMLOCK,
	KEY_INPUT_SCROLL,
	KEY_INPUT_NUMPAD7,
	KEY_INPUT_NUMPAD8,
	KEY_INPUT_NUMPAD9,
	KEY_INPUT_SUBTRACT,
	KEY_INPUT_NUMPAD4,
	KEY_INPUT_NUMPAD5,
	KEY_INPUT_NUMPAD6,
	KEY_INPUT_ADD,
	KEY_INPUT_NUMPAD1,
	KEY_INPUT_NUMPAD2,
	KEY_INPUT_NUMPAD3,
	KEY_INPUT_NUMPAD0,
	KEY_INPUT_DECIMAL,
	KEY_INPUT_OEM_102,
	KEY_INPUT_F11,
	KEY_INPUT_F12,
	KEY_INPUT_F13,
	KEY_INPUT_F14,
	KEY_INPUT_F15,
	KEY_INPUT_KANA,
	KEY_INPUT_ABNT_C1,
	KEY_INPUT_CONVERT,
	KEY_INPUT_NOCONVERT,
	KEY_INPUT_YEN,
	KEY_INPUT_ABNT_C2,
	KEY_INPUT_PREVTRACK,
	KEY_INPUT_AT,
	KEY_INPUT_COLON,
	KEY_INPUT_UNDERLINE,
	KEY_INPUT_KANJI,
	KEY_INPUT_STOP,
	KEY_INPUT_AX,
	KEY_INPUT_UNLABELED,
	KEY_INPUT_NEXTTRACK,
	KEY_INPUT_NUMPADENTER,
	KEY_INPUT_RCONTROL,
	KEY_INPUT_MUTE,
	KEY_INPUT_CALCULATOR,
	KEY_INPUT_PLAYPAUSE,
	KEY_INPUT_MEDIASTOP,
	KEY_INPUT_VOLUMEDOWN,
	KEY_INPUT_VOLUMEUP,
	KEY_INPUT_WEBHOME,
	KEY_INPUT_NUMPADCOMMA,
	KEY_INPUT_DIVIDE,
	KEY_INPUT_SYSRQ,
	KEY_INPUT_RMENU,
	KEY_INPUT_PAUSE,
	KEY_INPUT_HOME,
	KEY_INPUT_UP,
	KEY_INPUT_PRIOR,
	KEY_INPUT_LEFT,
	KEY_INPUT_RIGHT,
	KEY_INPUT_END,
	KEY_INPUT_DOWN,
	KEY_INPUT_NEXT,
	KEY_INPUT_INSERT,
	KEY_INPUT_DELETE,
	KEY_INPUT_LWIN,
	KEY_INPUT_RWIN,
	KEY_INPUT_APPS,
	KEY_INPUT_POWER,
	KEY_INPUT_SLEEP,
	KEY_INPUT_WAKE,
	KEY_INPUT_WEBSEARCH,
	KEY_INPUT_WEBREFRESH,
	KEY_INPUT_WEBSTOP,
	KEY_INPUT_WEBFORWARD,
	KEY_INPUT_WEBBACK,
	KEY_INPUT_MYCOMPUTER,
	KEY_INPUT_MAIL,
	KEY_INPUT_MEDIASELECT,
	KEY_INPUT_NUM,
};

/*
============================
Game Input (keyboard, mouse)
============================
*/

class Application;

class GameInput
{
public:
	GameInput();
	~GameInput();

	AkBool Initialize();
	void Update();
	bool LeftBtnDown();
	bool RightBtnDown();
	bool LeftBtnUp();
	bool RightBtnUp();
	bool LeftBtnHold();
	bool RightBtnHold();
	bool KeyFirstDown(KEY_INPUT input);
	bool KeyHoldDown(KEY_INPUT input);
	bool KeyUp(KEY_INPUT input);

	AkI32 GetMouseX() { return _tMousePos.x; }
	AkI32 GetMouseY() { return _tMousePos.y; }
	AkI32 GetAccumulatedMouseX() { return _iAccMousePosX; }
	AkI32 GetAccumulatedMouseY() { return _iAccMousePosY; }
	AkF32 GetNdcX() { return _fNdcX; }
	AkF32 GetNdcY() { return _fNdcY; }
	AkF32 GetAccumulatedNdcX() { return _fAccNdcX; }
	AkF32 GetAccumulatedNdcY() { return _fAccNdcY; }

private:
	void CleanUp();
	void AcquireKeyboadrDevice();
	void AcquireMouseDevice();
	void UpdateNDCPosition();

private:
	IDirectInput8* _pDirectInput = nullptr;
	IDirectInputDevice8* _pKeyboardDevice = nullptr;
	IDirectInputDevice8* _pMouseDevice = nullptr;
	DIMOUSESTATE _tDiMouseState = {};
	AkU8 _btMouseState[3] = {};
	AkU8 _btPrevMouseState[3] = {};
	AkU8 _btKeyState[256] = {};
	AkU8 _btPrevKeyState[256] = {};
	POINT _tMousePos = {};
	AkI32 _iDx = 0;
	AkI32 _iDy = 0;
	AkI32 _iDz = 0;
	AkI32 _iAccMousePosX = 0;
	AkI32 _iAccMousePosY = 0;
	AkF32 _fNdcX = 0.0f;
	AkF32 _fNdcY = 0.0f;
	AkF32 _fAccNdcX = 0.0f;
	AkF32 _fAccNdcY = 0.0f;
};

